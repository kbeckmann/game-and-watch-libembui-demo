/*
******************************************************************************
**

**  File        : LinkerScript.ld
**
**  Author		: Auto-generated by System Workbench for STM32
**
**  Abstract    : Linker script for STM32H7B0VBTx series
**                128Kbytes FLASH and 1216Kbytes RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used.
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed “as is,” without any warranty
**                of any kind.
**
*****************************************************************************
** @attention
**
** <h2><center>&copy; COPYRIGHT(c) 2019 STMicroelectronics</center></h2>
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**   1. Redistributions of source code must retain the above copyright notice,
**      this list of conditions and the following disclaimer.
**   2. Redistributions in binary form must reproduce the above copyright notice,
**      this list of conditions and the following disclaimer in the documentation
**      and/or other materials provided with the distribution.
**   3. Neither the name of STMicroelectronics nor the names of its contributors
**      may be used to endorse or promote products derived from this software
**      without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*****************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = 0x20020000;    /* end of RAM */
/* Generate a link error if heap and stack don't fit into RAM */
_Min_Heap_Size = 0x0;      /* required amount of heap  */
_Min_Stack_Size = 4 * 1024; /* required amount of stack */


/* Useful for scripts */
__NULLPTR_LENGTH__  = 0x100;
__ITCMRAM_LENGTH__  = 64K;
__DTCMRAM_LENGTH__  = 128K;
__RAM_LENGTH__      = 1024K;
__AHBRAM_LENGTH__   = 128K;
__FLASH_LENGTH__    = 128K;

__EXTFLASH_START__  = 0x90000000;
__SAVE_LENGTH__     = 192K;
__EXTFLASH_LENGTH__ = DEFINED(LARGE_FLASH) ? 16384K - __SAVE_LENGTH__ : 1024K - __SAVE_LENGTH__ ;
__SAVE_START__      = __EXTFLASH_START__ + __EXTFLASH_LENGTH__;
__SAVE_END__        = __EXTFLASH_START__ + __EXTFLASH_LENGTH__ + __SAVE_LENGTH__;

/* Specify the memory areas */
MEMORY
{
  /* RAM */
  NULLPTR  (xrw) : ORIGIN = 0x00000000, LENGTH =   __NULLPTR_LENGTH__
  ITCMRAM  (xrw) : ORIGIN = 0x00000000 + __NULLPTR_LENGTH__, LENGTH =   64K - __NULLPTR_LENGTH__
  DTCMRAM  (xrw) : ORIGIN = 0x20000000, LENGTH =  128K
  RAM      (xrw) : ORIGIN = 0x24000000, LENGTH = 1024K
  AHBRAM   (xrw) : ORIGIN = 0x30000000, LENGTH =  128K

  /* FLASH */
  FLASH    (xr ) : ORIGIN = 0x08000000, LENGTH =  128K
  EXTFLASH (xr ) : ORIGIN = __EXTFLASH_START__, LENGTH = __EXTFLASH_LENGTH__
  SAVEFLASH(xr ) : ORIGIN = __EXTFLASH_START__ + __EXTFLASH_LENGTH__, LENGTH = __SAVE_LENGTH__
}


/* Define output sections */
SECTIONS
{
  /* Copied from flash to ram at boot */
  ._itcram :
  {
    __itcram_start__ = .;
    . = ALIGN(4);
    *(.itcram_data)
    . = ALIGN(4);
    *(.itcram_text)
    . = ALIGN(4);
    __itcram_end__ = .;
  } > ITCMRAM

  /* Data that should be copied from extflash to axiram */
  /* used by the startup to initialize data */
  _siramdata = LOADADDR(._ram_exec);
  __extflash_start__ = LOADADDR(._ram_exec);
  ._ram_exec :
  {
    __ram_start__ = .;
    . = ALIGN(4);
    _sram_text = .;
    *(.ram_text)
    _eram_text = .;
    _sram_data = .;
    *(.ram_data)
    _eram_data = .;
    . = ALIGN(4);
  } >RAM AT> EXTFLASH


  ._saveflash :
  {
    . = ALIGN(4);
    . = ALIGN(64K);
    *(.saveflash_bank_1)
    . = ALIGN(64K);
    *(.saveflash_bank_2)
    __saveflash_start__ = .;
    *(.saveflash)
  } > SAVEFLASH

  ._extflash :
  {
    __extflash_text_start__ = .;
    . = ALIGN(4);
    *(.extflash_text)
    . = ALIGN(4);
    __extflash_text_end__ = .;
    __extflash_data_start__ = .;
    . = ALIGN(4);
    *(.extflash_data)
    . = ALIGN(4);
    __extflash_data_end__ = .;
    __extflash_game_rom_start__ = .;
    . = ALIGN(4);
    *(.extflash_game_rom)
    . = ALIGN(4);
    __extflash_game_rom_end__ = .;
    __extflash_end__ = .;
  } > EXTFLASH

  ._ram :
  {
    . = ALIGN(4);
    *(.lcd)
    *(.emulator_data)
    *(.emulator_text)
    . = ALIGN(4);
    __ram_end__ = .;
  } > RAM

  ._ahbram :
  {
    __ahbram_start__ = .;
    . = ALIGN(4);
    *(.audio)
    . = ALIGN(4);
    __ahbram_end__ = .;
  } > AHBRAM

  /* The startup code goes first into FLASH */
  .isr_vector :
  {
    __flash_start__ = .;
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } >FLASH

  /* The program code and other data goes into FLASH */
  .text :
  {
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH

  /* Constant data goes into FLASH */
  .rodata :
  {
    . = ALIGN(4);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN(4);
  } >FLASH

  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
  .ARM : {
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
  } >FLASH

  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  .fini_array :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } >FLASH

  /* used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections goes into RAM, load LMA copy after code */
  .data : 
  {

    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */
  } >DTCMRAM AT> FLASH

  ._flash_end :
  {
    . = ALIGN(4);
    __flash_end__ = .;
  }
  
  /* Uninitialized data section */
  . = ALIGN(4);
  .bss :
  {
    __dtcram_start__ = .;
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >DTCMRAM

  ._persistent :
  {
    . = ALIGN(8);
    *(.persistent)
    . = ALIGN(8);
  } >DTCMRAM

  /* User_heap_stack section, used to check that there is enough RAM left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
    __dtcram_end__ = .;
  } >DTCMRAM

  /* Remove information from the standard libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}


